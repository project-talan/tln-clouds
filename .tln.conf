const path = require('path');
const fs = require('fs');
const os = require('os');

const isWindows = os.platform() === 'win32';
const wrap = (v) => isWindows ? `%${v}%` : `\${${v}}`;

const buildScript = (layers, reverse, fn) => {
  const arr = layers.split(',');
  if (reverse) {
    arr.reverse();
  }
  const r = []
  if (isWindows) {
    r.push(`set cwd=${wrap('cd')}`);
  } else {
    r.push('cwd=$(pwd)');
  }
  arr.map(l => {
    const { cmds, cmd } = fn(l);
    r.push(`cd ${wrap('cwd')} && cd ${l}`);
    r.push(...cmds);
    r.push(`${cmd}`);
  });
  return r;
}

const getBackendConfig = (backend, layer, env) => {
  const cmds = [];
  let params = '';
  if (backend) {
    cmds.push(`echo 'terraform {' > backend.tf`);
    switch (backend) {
      case 'cloud':
        cmds.push(`echo '  cloud {' >> backend.tf`);
        cmds.push(`echo '    organization = "${env.TF_VAR_org_id}"' >> backend.tf`);
        cmds.push(`echo '    workspaces { name = "${env.TF_VAR_project_id}-${env.TLN_COMPONENT_ID}-${env.TF_VAR_ii_id}-${layer}" }' >> backend.tf`);
        cmds.push(`echo '  }' >> backend.tf`);
        break;
      case 'remote':
        cmds.push(`echo '  backend "remote" {' >> backend.tf`);
        cmds.push(`echo '    organization = "${env.TF_VAR_org_id}"' >> backend.tf`);
        cmds.push(`echo '    workspaces { name = "${env.TF_VAR_project_id}-${env.TLN_COMPONENT_ID}-${env.TF_VAR_ii_id}-${layer}" }' >> backend.tf`);
        cmds.push(`echo '  }" >> backend.tf`);
        break;
      case 'pg':
        cmds.push('echo "  backend \\"remote\\" {" >> backend.tf');
        cmds.push(`echo "    conn_str = \\"${wrap('TF_VAR_backend_pg_conn_str')}\\"" >> backend.tf`);
        cmds.push('echo "  }" >> backend.tf');
        break;
      case 's3':
        cmds.push('echo "  backend \\"s3\\" {" >> backend.tf');
        cmds.push(`echo "    bucket = \\"${wrap('TF_VAR_backend_s3_bucket')}\\"" >> backend.tf`);
        cmds.push(`echo "    key = \\"tfenvs/${wrap('TF_VAR_project_id')}/${wrap('TLN_COMPONENT_ID')}/${wrap('TF_VAR_ii_id')}/${layer}/terraform.tfstate\\"" >> backend.tf`);
        cmds.push(`echo "    dynamodb_table = \\"${wrap('TF_VAR_backend_s3_dynamodb_table')}\\"" >> backend.tf`);
        cmds.push(`echo "    region = \\"${wrap('TF_VAR_ackend_s3_region')}\\"" >> backend.tf`);
        cmds.push('echo "  }" >> backend.tf');
        break;
    }
    cmds.push(`echo '}' >> backend.tf`);
  } else {
    params = ' -reconfigure';
    cmds.push('rm -f backend.tf');
  }
  return {cmds, params};
}

module.exports = {
  options: async (tln, args) => {
    args
      .prefix('TLN_CLOUDS')
      .option('plan', { describe: 'Terraform plan only execution', default: false, type: 'boolean' })
      .option('layers', { describe: 'List of comma-separated layers application has', default: "network,managed,app,tenant", type: 'string' })
      .option('backend', { describe: 'Use cloud based terraform backend', default: null, type: 'string' })
      .option('bastion', { describe:  'Bastion in form user@ip', default: null, type: 'string' })
    ;
  },
  env: async (tln, env) => {
    env.TLN_CLOUDS_II = env.TF_VAR_ii_id;
  },
  dotenvs: async (tln) => ['.env'],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  steps: async (tln) => [
    { id: 'construct', builder: async (tln, script) => {
        script.set(buildScript(script.env.TLN_CLOUDS_LAYERS, false, layer => {
          const apply = script.env.TLN_CLOUDS_PLAN?'':' && terraform apply -auto-approve';
          const { cmds, params } = getBackendConfig(script.env.TLN_CLOUDS_BACKEND, layer, script.env);
          return { cmds: cmds || [], cmd: `terraform init${params||''} && terraform plan${apply}` };
        }));
      }
    },
    { id: 'deconstruct', builder: async (tln, script) => {
        script.set(buildScript(script.env.TLN_CLOUDS_LAYERS, true, layer => {
          const apply = script.env.TLN_CLOUDS_PLAN?'':' && terraform apply -destroy -auto-approve';
          const { cmds, params } = getBackendConfig(script.env.TLN_CLOUDS_BACKEND, layer, script.env);
          return { cmds: cmds || [], cmd: `terraform init${params||''} && terraform plan -destroy${apply}` };
        }));
      }
    }

  ],
  components: async (tln) => []
}