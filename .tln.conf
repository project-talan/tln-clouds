const path = require('path');
const fs = require('fs');

const buildScript = (isWindows, layers, reverse, cmd) => {
  const arr = layers.split(',');
  if (reverse) {
    arr.reverse();
  }
  if (isWindows) {
    return ['set cwd=%cd%'].concat(arr.map(l => `cd %cwd% && cd ${l} && ${cmd(l)}`));
  }
  return ['cwd=$(pwd)'].concat(arr.map(l => `cd \${cwd} && cd ${l} && ${cmd(l)}`));
}

const getBackendConfig = (backend, layer) => {
  return (backend) ? ` -reconfigure -backend-config="bucket=\${TF_VAR_backend_s3_bucket}" -backend-config="key=tfenvs/$\{TF_VAR_project_name}/\${TF_VAR_env_name}/${layer}/terraform.tfstate" -backend-config="dynamodb_table=\${TF_VAR_backend_s3_dynamodb_table}" -backend-config="region=\${---}"` : '';
}

module.exports = {
  options: async (tln, args) => {
    args
      .prefix('TLN_CLOUDS')
      .option('plan', { describe: 'Terraform plan only execution', default: false, type: 'boolean' })
      .option('layers', { describe: 'List of comma-separated layers application has', default: "network,managed,app,tenant", type: 'string' })
      .option('backend', { describe: 'Use cloud based terraform backend', default: false, type: 'boolean' })
      .option('bastion', { describe:  'Bastion in form user@ip', default: null, type: 'string' })
    ;
  },
  env: async (tln, env) => {
    env.TLN_INFRASTRUCTURE_INSTANCE = 'dev';
  },
  dotenvs: async (tln) => ['.env'],
  inherits: async (tln) => [],
  depends: async (tln) => ['terraform-1.2.5', 'helm-3.9.2'],
  steps: async (tln) => [
    { id: 'construct', builder: async (tln, script) => {
        script.set(buildScript(tln.isWindows(), script.env.TLN_CLOUDS_LAYERS, false, layer => {
          const apply = script.env.TLN_CLOUDS_PLAN?'':' && terraform apply -auto-approve';
          return `terraform init${getBackendConfig(script.env.TLN_CLOUDS_BACKEND, layer)} && terraform plan${apply}`;
        }));
      }
    },
    { id: 'deconstruct', builder: async (tln, script) => {
        script.set(buildScript(tln.isWindows(), script.env.TLN_CLOUDS_LAYERS, true, layer => {
          return `terraform init${getBackendConfig(script.env.TLN_CLOUDS_BACKEND, layer)} && terraform destroy -auto-approve`;
        }));
      }
    }

  ],
  components: async (tln) => []
}